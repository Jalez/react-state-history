# Recommended Name Changes

## Project Level Changes
1. Rename project from "undo-redo" to "state-history" or "react-state-history"
   - More accurately reflects the broader purpose of the library
   - Makes it clear it's not just about undo/redo operations

## Core Concept Renames
2. Rename main provider and hooks:
   - StateHistoryProvider -> StateHistoryProvider
   - useHistoryState -> useHistoryState
   - StateHistoryContext -> StateHistoryContext
   - StateHistory -> StateHistoryState
   - CommandHistoryReducer -> StateHistoryReducer

3. Hook name improvements:
   - useTrackableState -> useTrackableState
     Reasoning: More intuitive name for a hook that creates trackable state changes
   - useHistoryState -> useStateWithHistory
     Reasoning: More explicit about what the hook does - creates state with history tracking

4. Component renames:
   - HistoryControls -> HistoryControls
     Reasoning: Controls can do more than just undo/redo (clear, persistence toggle)
   - HistoryControlsRegistry -> HistoryControlsRegistry
     Reasoning: Maintains consistency with other renamed components

5. Internal implementation files:
   - commandUtils.ts -> stateChangeUtils.ts
   - commandRegistry.ts -> stateChangeRegistry.ts
   - StateChange interface -> StateChange interface
     Reasoning: These better reflect that we're tracking state changes, not just commands

## Type Renames
6. Interface and type renames:
   - StateHistoryContext -> StateHistoryContext
   - StateHistoryProviderProps -> StateHistoryProviderProps
   - StateChangeFactory -> StateChangeFactory
   - SerializableStateChange -> SerializableStateChange

## Constants and Action Names
7. Storage key prefix:
   - STORAGE_KEY_PREFIX from "undoredo_history_" to "state_history_"

8. Action types in reducer:
   - Keep "EXECUTE", "UNDO", "REDO" as they are clear and standard terms
   - No need to rename other action types as they are internal implementation details

## General Notes
- The term "StateChange" can stay in internal implementation files where we specifically deal with the StateChange pattern
- The term "undo/redo" should remain in user-facing UI elements where those are the standard terms users expect
- "History" should be preferred over "StateChange" in public API and documentation
- "State" should be emphasized over "StateChange" in public interfaces and hooks

## Migration Strategy
1. Create new names alongside old ones
2. Mark old names as deprecated
3. Update documentation with new terminology
4. Release major version with new names
5. Remove old names in subsequent major version